** start of index.html **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Technical Documentation</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>** start of index.html **

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Technical Documentation</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <nav id="navbar">
    <header>JavaScript Documentation</header>
    <a href="#Introduction" class="nav-link">Introduction</a>
    <a href="#Syntax_and_Types" class="nav-link">Syntax and Types</a>
    <a href="#Variables" class="nav-link">Variables</a>
    <a href="#Functions" class="nav-link">Functions</a>
    <a href="#Loops_and_Iteration" class="nav-link">Loops and Iteration</a>
  </nav>

  <main id="main-doc">
    <section class="main-section" id="Introduction">
      <header>Introduction</header>
      <p>JavaScript is a high-level, interpreted scripting language used to create interactive effects in web browsers.</p>
      <p>It is a core technology of the World Wide Web alongside HTML and CSS.</p>
      <code>console.log("Hello, world!");</code>
      <p>JavaScript allows developers to create dynamic web pages by manipulating the DOM.</p>
      <p>It supports both object-oriented and functional programming styles.</p>
      <ul>
        <li>Client-side scripting</li>
        <li>Event-driven programming</li>
        <li>Lightweight language</li>
      </ul>
    </section>

    <section class="main-section" id="Syntax_and_Types">
      <header>Syntax and Types</header>
      <p>JavaScript syntax is the set of rules defining a correctly structured JavaScript program.</p>
      <p>It uses camelCase for variable names and function names.</p>
      <code>let userName = "Alice";</code>
      <p>Common types include String, Number, Boolean, Object, and Array.</p>
      <p>JavaScript is dynamically typed, so variables can change type at runtime.</p>
      <ul>
        <li>Primitive types: String, Number, Boolean, Null, Undefined</li>
        <li>Reference types: Object, Array, Function</li>
      </ul>
    </section>

    <section class="main-section" id="Variables">
      <header>Variables</header>
      <p>Variables are used to store data that can be referenced and manipulated in a program.</p>
      <p>You can declare variables using var, let, or const.</p>
      <code>const PI = 3.14159;</code>
      <p>let and const are block-scoped, whereas var is function-scoped.</p>
      <p>const is used when a variable's value should not change.</p>
      <ul>
        <li>let is preferred for variables that change</li>
        <li>const is preferred for constants</li>
        <li>Avoid using var in modern code</li>
      </ul>
    </section>

    <section class="main-section" id="Functions">
      <header>Functions</header>
      <p>Functions are reusable blocks of code that perform a specific task.</p>
      <p>You can define functions using function declarations or arrow functions.</p>
      <code>function greet(name) { return "Hello " + name; }</code>
      <p>Functions can accept parameters and return values.</p>
      <p>Arrow functions provide a shorter syntax and do not bind `this`.</p>
      <ul>
        <li>Function declaration</li>
        <li>Function expression</li>
        <li>Arrow function</li>
      </ul>
    </section>

    <section class="main-section" id="Loops_and_Iteration">
      <header>Loops and Iteration</header>
      <p>Loops are used to run a block of code multiple times.</p>
      <p>JavaScript supports several types of loops: for, while, do...while, for...of, and for...in.</p>
      <code>for (let i = 0; i < 5; i++) { console.log(i); }</code>
      <p>Use loops when working with arrays or when repeating operations is necessary.</p>
      <p>Use break and continue statements to control loop execution.</p>
      <ul>
        <li>for loop</li>
        <li>while loop</li>
        <li>do...while loop</li>
      </ul>
    </section>
  </main>
</body>
</html>


** end of index.html **

** start of styles.css **

body {
  margin: 0;
  font-family: Arial, sans-serif;
  display: flex;
}

#navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 250px;
  height: 100vh;
  background-color: darkgreen;
  color: #fff;
  padding: 20px;
  box-sizing: border-box;
  overflow-y: auto;
}

#navbar header {
  font-size: 1.5em;
  margin-bottom: 20px;
}

.nav-link {
  display: block;
  color: #61dafb;
  text-decoration: none;
  margin: 10px 0;
}

.nav-link:hover {
  text-decoration: underline;
}

#main-doc {
  margin-left: 270px;
  padding: 20px;
}

section {
  margin-bottom: 50px;
}

code {
  display: block;
  background-color: #f4f4f4;
  padding: 10px;
  margin: 10px 0;
  border-left: 3px solid #ccc;
}

ul {
  margin-top: 10px;
  padding-left: 20px;
}

/* Responsive layout */
@media (max-width: 768px) {
  body {
    flex-direction: column;
  }

  #navbar {
    position: relative;
    width: 100%;
    height: auto;
  }

  #main-doc {
    margin-left: 0;
  }
}


** end of styles.css **


  <nav id="navbar">
    <header>JavaScript Documentation</header>
    <a href="#Introduction" class="nav-link">Introduction</a>
    <a href="#Syntax_and_Types" class="nav-link">Syntax and Types</a>
    <a href="#Variables" class="nav-link">Variables</a>
    <a href="#Functions" class="nav-link">Functions</a>
    <a href="#Loops_and_Iteration" class="nav-link">Loops and Iteration</a>
  </nav>

  <main id="main-doc">
    <section class="main-section" id="Introduction">
      <header>Introduction</header>
      <p>JavaScript is a high-level, interpreted scripting language used to create interactive effects in web browsers.</p>
      <p>It is a core technology of the World Wide Web alongside HTML and CSS.</p>
      <code>console.log("Hello, world!");</code>
      <p>JavaScript allows developers to create dynamic web pages by manipulating the DOM.</p>
      <p>It supports both object-oriented and functional programming styles.</p>
      <ul>
        <li>Client-side scripting</li>
        <li>Event-driven programming</li>
        <li>Lightweight language</li>
      </ul>
    </section>

    <section class="main-section" id="Syntax_and_Types">
      <header>Syntax and Types</header>
      <p>JavaScript syntax is the set of rules defining a correctly structured JavaScript program.</p>
      <p>It uses camelCase for variable names and function names.</p>
      <code>let userName = "Alice";</code>
      <p>Common types include String, Number, Boolean, Object, and Array.</p>
      <p>JavaScript is dynamically typed, so variables can change type at runtime.</p>
      <ul>
        <li>Primitive types: String, Number, Boolean, Null, Undefined</li>
        <li>Reference types: Object, Array, Function</li>
      </ul>
    </section>

    <section class="main-section" id="Variables">
      <header>Variables</header>
      <p>Variables are used to store data that can be referenced and manipulated in a program.</p>
      <p>You can declare variables using var, let, or const.</p>
      <code>const PI = 3.14159;</code>
      <p>let and const are block-scoped, whereas var is function-scoped.</p>
      <p>const is used when a variable's value should not change.</p>
      <ul>
        <li>let is preferred for variables that change</li>
        <li>const is preferred for constants</li>
        <li>Avoid using var in modern code</li>
      </ul>
    </section>

    <section class="main-section" id="Functions">
      <header>Functions</header>
      <p>Functions are reusable blocks of code that perform a specific task.</p>
      <p>You can define functions using function declarations or arrow functions.</p>
      <code>function greet(name) { return "Hello " + name; }</code>
      <p>Functions can accept parameters and return values.</p>
      <p>Arrow functions provide a shorter syntax and do not bind `this`.</p>
      <ul>
        <li>Function declaration</li>
        <li>Function expression</li>
        <li>Arrow function</li>
      </ul>
    </section>

    <section class="main-section" id="Loops_and_Iteration">
      <header>Loops and Iteration</header>
      <p>Loops are used to run a block of code multiple times.</p>
      <p>JavaScript supports several types of loops: for, while, do...while, for...of, and for...in.</p>
      <code>for (let i = 0; i < 5; i++) { console.log(i); }</code>
      <p>Use loops when working with arrays or when repeating operations is necessary.</p>
      <p>Use break and continue statements to control loop execution.</p>
      <ul>
        <li>for loop</li>
        <li>while loop</li>
        <li>do...while loop</li>
      </ul>
    </section>
  </main>
</body>
</html>


** end of index.html **

** start of styles.css **

body {
  margin: 0;
  font-family: Arial, sans-serif;
  display: flex;
}

#navbar {
  position: fixed;
  top: 0;
  left: 0;
  width: 250px;
  height: 100vh;
  background-color: #222;
  color: #fff;
  padding: 20px;
  box-sizing: border-box;
  overflow-y: auto;
}

#navbar header {
  font-size: 1.5em;
  margin-bottom: 20px;
}

.nav-link {
  display: block;
  color: #61dafb;
  text-decoration: none;
  margin: 10px 0;
}

.nav-link:hover {
  text-decoration: underline;
}

#main-doc {
  margin-left: 270px;
  padding: 20px;
}

section {
  margin-bottom: 50px;
}

code {
  display: block;
  background-color: #f4f4f4;
  padding: 10px;
  margin: 10px 0;
  border-left: 3px solid #ccc;
}

ul {
  margin-top: 10px;
  padding-left: 20px;
}

/* Responsive layout */
@media (max-width: 768px) {
  body {
    flex-direction: column;
  }

  #navbar {
    position: relative;
    width: 100%;
    height: auto;
  }

  #main-doc {
    margin-left: 0;
  }
}


** end of styles.css **
